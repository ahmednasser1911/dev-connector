{"ast":null,"code":"import axios from \"axios\";\nimport { PROFILE_ERROR, GET_PROFILE, UPDATE_PROFILE, CLEAR_PROFILE, ACCOUNT_DELETED, GET_PROFILES, GET_REPOS } from './types';\nimport { connect } from \"react-redux\";\nimport { setAlert } from '../actions/alert'; // get current profile\n\nexport const getProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data // profile\n\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.post('/api/profile', body, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(!edit ? 'Profile Created' : 'Profile Updated', 'success')); // if create-profile\n\n    if (!edit) history.push('/dashboard');\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n  }\n}; // Add experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.put('/api/profile/experience', body, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n  }\n}; // Add education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.put('/api/profile/education', body, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Education Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n  }\n}; // Delete Experience\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Deleted', 'danger'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Education\n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/education/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Education Deleted', 'danger'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Auth Account\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure?')) {\n    try {\n      await axios.delete(`/api/profile`);\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your Account has been Deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; // get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data // profiles\n\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get profile by user id\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data // profile\n\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get github repos\n\nexport const getGitHubRepos = username => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/github/${username}`);\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data // Repos\n\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Nasser/Desktop/fullstack-projects/dev-connector/client/src/actions/profile.js"],"names":["axios","PROFILE_ERROR","GET_PROFILE","UPDATE_PROFILE","CLEAR_PROFILE","ACCOUNT_DELETED","GET_PROFILES","GET_REPOS","connect","setAlert","getProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","formData","history","edit","config","headers","body","JSON","stringify","post","push","errors","forEach","error","addExperience","put","addEducation","deleteExperience","id","delete","deleteEducation","deleteAccount","window","confirm","getProfiles","getProfileById","userId","getGitHubRepos","username"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport {\r\n    PROFILE_ERROR,\r\n    GET_PROFILE,\r\n    UPDATE_PROFILE,\r\n    CLEAR_PROFILE,\r\n    ACCOUNT_DELETED,\r\n    GET_PROFILES,\r\n    GET_REPOS\r\n} from './types';\r\nimport { connect } from \"react-redux\";\r\nimport {setAlert} from '../actions/alert';\r\n\r\n// get current profile\r\nexport const getProfile = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get('/api/profile/me');\r\n\r\n        dispatch({\r\n            type: GET_PROFILE,\r\n            payload: res.data // profile\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const createProfile = (formData , history ,edit = false) => async dispatch => {\r\n    try {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const body = JSON.stringify(formData);\r\n        const res = await axios.post('/api/profile' , body, config);\r\n\r\n        dispatch({\r\n            type: GET_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert(!edit ? 'Profile Created' : 'Profile Updated' , 'success'));\r\n        // if create-profile\r\n        if(!edit)\r\n            history.push('/dashboard')\r\n\r\n    } catch(err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg , 'danger'));\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Add experience\r\nexport const addExperience = (formData , history) => async dispatch => {\r\n    try {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const body = JSON.stringify(formData);\r\n        const res = await axios.put('/api/profile/experience' , body, config);\r\n\r\n        dispatch({\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('Experience Added' , 'success'));\r\n        history.push('/dashboard')\r\n\r\n    } catch(err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg , 'danger'));\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Add education\r\nexport const addEducation = (formData , history) => async dispatch => {\r\n    try {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const body = JSON.stringify(formData);\r\n        const res = await axios.put('/api/profile/education' , body, config);\r\n\r\n        dispatch({\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('Education Added' , 'success'));\r\n        history.push('/dashboard')\r\n\r\n    } catch(err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg , 'danger'));\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Delete Experience\r\nexport const deleteExperience = id => async dispatch => {\r\n    try {\r\n        const res = await axios.delete(`/api/profile/experience/${id}`);\r\n        dispatch({\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        });\r\n        dispatch(setAlert('Experience Deleted' , 'danger'));\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n// Delete Education\r\nexport const deleteEducation = id => async dispatch => {\r\n    try {\r\n        const res = await axios.delete(`/api/profile/education/${id}`);\r\n        dispatch({\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        });\r\n        dispatch(setAlert('Education Deleted' , 'danger'));\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n// Delete Auth Account\r\nexport const deleteAccount = () => async dispatch => {\r\n    if(window.confirm('Are you sure?')){\r\n        try {\r\n            await axios.delete(`/api/profile`);\r\n            dispatch({ type: CLEAR_PROFILE });\r\n            dispatch({ type: ACCOUNT_DELETED });\r\n            dispatch(setAlert('Your Account has been Deleted'));\r\n        } catch (err) {\r\n            dispatch({\r\n                type: PROFILE_ERROR,\r\n                payload: {msg :  err.response.statusText , status: err.response.status}\r\n            });\r\n        }\r\n    }\r\n   \r\n}\r\n\r\n// get all profiles\r\nexport const getProfiles = () => async dispatch => {\r\n    dispatch({ type: CLEAR_PROFILE });\r\n    try {\r\n        const res = await axios.get('/api/profile');\r\n\r\n        dispatch({\r\n            type: GET_PROFILES,\r\n            payload: res.data // profiles\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n\r\n    }\r\n}\r\n\r\n// get profile by user id\r\nexport const getProfileById = userId => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/profile/user/${userId}`);\r\n\r\n        dispatch({\r\n            type: GET_PROFILE,\r\n            payload: res.data // profile\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n\r\n    }\r\n}\r\n\r\n// get github repos\r\nexport const getGitHubRepos = username => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/profile/github/${username}`);\r\n\r\n        dispatch({\r\n            type: GET_REPOS,\r\n            payload: res.data // Repos\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            payload: {msg :  err.response.statusText , status: err.response.status}\r\n        });\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}