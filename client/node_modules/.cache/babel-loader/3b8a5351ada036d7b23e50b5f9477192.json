{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nasser\\\\Desktop\\\\fullstack-projects\\\\dev-connector\\\\client\\\\src\\\\components\\\\profile\\\\ProfileGithub.js\";\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getGitHubRepos } from \"../../actions/profile\";\nimport Spinner from \"../layout/Spinner\";\n\nconst ProfileGithub = ({\n  username,\n  getGitHubRepos,\n  repos\n}) => {\n  useEffect(() => {\n    console.log(username);\n    getGitHubRepos(username);\n  }, [getGitHubRepos]);\n  return React.createElement(\"div\", {\n    className: \"profile-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), \" Github Repos\"), repos.length === 0 ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }) : repos.map(repo => React.createElement(\"div\", {\n    key: repo._id,\n    className: \"repo bg-white p-1 my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, repo.name)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, repo.describtion)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"badge badge-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Stars: \", repos.stargazers_count), React.createElement(\"li\", {\n    className: \"badge badge-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Watchers: \", repos.watchers_count), React.createElement(\"li\", {\n    className: \"badge badge-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Forks: \", repos.forks_count))))));\n};\n\nProfileGithub.propTypes = {\n  getGitHubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGitHubRepos\n})(ProfileGithub);","map":{"version":3,"sources":["C:/Users/Nasser/Desktop/fullstack-projects/dev-connector/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","PropTypes","connect","getGitHubRepos","Spinner","ProfileGithub","username","repos","console","log","length","map","repo","_id","html_url","name","describtion","stargazers_count","watchers_count","forks_count","propTypes","func","isRequired","array","string","mapStateToProps","state","profile"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYH,EAAAA,cAAZ;AAA4BI,EAAAA;AAA5B,CAAD,KAAyC;AAC3DP,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAH,IAAAA,cAAc,CAACG,QAAD,CAAd;AACH,GAHQ,EAGL,CAACH,cAAD,CAHK,CAAT;AAIF,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,kBADF,EAIGI,KAAK,CAACG,MAAN,KAAiB,CAAjB,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGCH,KAAK,CAACI,GAAN,CAAUC,IAAI,IACZ;AAAK,IAAA,GAAG,EAAIA,IAAI,CAACC,GAAjB;AAAsB,IAAA,SAAS,EAAC,wBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAED,IAAI,CAACE,QADb;AAEE,IAAA,MAAM,EAAC,QAFT;AAGE,IAAA,GAAG,EAAC,qBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,IAAI,CAACG,IALR,CADF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,WAAT,CAVF,CADF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUT,KAAK,CAACU,gBADhB,CADF,EAIE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaV,KAAK,CAACW,cADnB,CAJF,EAOE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0CX,KAAK,CAACY,WAAhD,CAPF,CADF,CAbF,CADF,CAPJ,CADF;AAsCD,CA3CD;;AA6CAd,aAAa,CAACe,SAAd,GAA0B;AACxBjB,EAAAA,cAAc,EAAEF,SAAS,CAACoB,IAAV,CAAeC,UADP;AAExBf,EAAAA,KAAK,EAAEN,SAAS,CAACsB,KAAV,CAAgBD,UAFC;AAGxBhB,EAAAA,QAAQ,EAAEL,SAAS,CAACuB,MAAV,CAAiBF;AAHH,CAA1B;;AAMA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChCnB,EAAAA,KAAK,EAAEmB,KAAK,CAACC,OAAN,CAAcpB;AADW,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAACuB,eAAD,EAAkB;AAAEtB,EAAAA;AAAF,CAAlB,CAAP,CAA6CE,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { getGitHubRepos } from \"../../actions/profile\";\r\nimport Spinner from \"../layout/Spinner\";\r\n\r\nconst ProfileGithub = ({ username, getGitHubRepos, repos }) => {\r\n    useEffect(() => {\r\n        console.log(username)\r\n        getGitHubRepos(username)\r\n    } , [getGitHubRepos])\r\n  return (\r\n    <div className=\"profile-github\">\r\n      <h2 className=\"text-primary my-1\">\r\n        <i className=\"fa fa-github\"></i> Github Repos\r\n      </h2>\r\n      {repos.length === 0 ? (\r\n        <Spinner />\r\n      ) : (\r\n        repos.map(repo => (\r\n          <div key = {repo._id} className=\"repo bg-white p-1 my-1\">\r\n            <div>\r\n              <h4>\r\n                <a\r\n                  href={repo.html_url}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {repo.name}\r\n                </a>\r\n              </h4>\r\n              <p>{repo.describtion}</p>\r\n            </div>\r\n            <div>\r\n              <ul>\r\n                <li className=\"badge badge-primary\">\r\n                  Stars: {repos.stargazers_count}\r\n                </li>\r\n                <li className=\"badge badge-dark\">\r\n                  Watchers: {repos.watchers_count}\r\n                </li>\r\n                <li className=\"badge badge-light\">Forks: {repos.forks_count}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileGithub.propTypes = {\r\n  getGitHubRepos: PropTypes.func.isRequired,\r\n  repos: PropTypes.array.isRequired,\r\n  username: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  repos: state.profile.repos\r\n});\r\n\r\nexport default connect(mapStateToProps, { getGitHubRepos })(ProfileGithub);\r\n"]},"metadata":{},"sourceType":"module"}