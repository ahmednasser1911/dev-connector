{"ast":null,"code":"import { REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"../actions/types\";\nimport { setAlert } from \"./alert\";\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  // check token in local storage\n  if (localStorage.token) {\n    // set token to the headers\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    // get auth user\n    const res = await axios.get('http://localhost:5000/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data // user\n\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data // token\n\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config); // login\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data // token--user\n\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // logout user\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Nasser/Desktop/fullstack-projects/dev-connector/client/src/actions/auth.js"],"names":["REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAlert","axios","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import { \r\n    REGISTER_FAIL ,\r\n    REGISTER_SUCCESS ,\r\n    USER_LOADED ,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT    \r\n} from \"../actions/types\";\r\n\r\nimport {setAlert} from \"./alert\";\r\nimport axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n// Load User\r\nexport const loadUser = () => async dispatch => {\r\n    // check token in local storage\r\n    if(localStorage.token){\r\n        // set token to the headers\r\n       setAuthToken(localStorage.token);\r\n    } \r\n\r\n    try {\r\n        // get auth user\r\n        const res = await axios.get('http://localhost:5000/api/auth');\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data // user\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        });\r\n    }\r\n}\r\n\r\nexport const register = ({name , email , password}) => async dispatch => {\r\n   \r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({name , email , password});\r\n\r\n    try {\r\n        const res = await axios.post('/api/users' , body , config );\r\n\r\n        dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data // token\r\n        });\r\n\r\n        dispatch(loadUser());\r\n\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg , 'danger'));\r\n            });\r\n        }\r\n        dispatch({\r\n            type: REGISTER_FAIL,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const login = (email , password) => async dispatch => {\r\n   \r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ email , password });\r\n\r\n    try {\r\n        const res = await axios.post('/api/auth' , body , config ); // login\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data // token--user\r\n        });\r\n\r\n        dispatch(loadUser());\r\n\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg , 'danger'));\r\n            });\r\n        }\r\n        dispatch({\r\n            type: LOGIN_FAIL,\r\n        });\r\n    }\r\n}\r\n\r\n// logout user\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}